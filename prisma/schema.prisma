// This is your Prisma schema file
generator client {
  provider = "prisma-client-js" // Specifies the Prisma Client as the output
}

datasource db {
  provider = "mysql"             // Specifies MySQL as the database type
  url      = env("DATABASE_URL") // Reads the connection string from the environment
}

// Enum for tracking the status of calls
enum Status {
 ACTIVE
 NOT_ACTIVE
}
// Enum for making role
enum Role {
  USER
  ADMIN
  OPERATOR
}


// Unified User model (combines Member and Google OAuth User fields)
model User {
  id             String   @id @default(cuid())     // Unique identifier
  name           String?                            // User's name
  email          String? @unique                   // User's email
  emailVerified  DateTime?                        // Email verification timestamp
  image          String?                            // Profile image URL

  phoneNumber1   String?                           // Primary phone number
  phoneNumber2   String?                           // Secondary phone number
  payingStyle    String?                           // Payment style description
  status         Status   @default(ACTIVE)    // Call status
  description    String?                           // Reason for unsuccessful calls
  lastCalled     DateTime? @default(now())         // Last call timestamp
  password       String?                             // Hashed password field
  role           Role     @default(USER)          // User's role (enum)

  // Relations
  accounts       Account[]                         // Relation to OAuth accounts
  sessions       Session[]                         // Relation to sessions
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}



model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
